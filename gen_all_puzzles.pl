% -*- mode: Prolog; coding: utf-8 -*-

:- module(gen_all_puzzles, [write_all_puzzles/2]).

:- use_module(nerdle, [puzzle_fill/1]).

puzzle_fill_string(S) :-
    length(P, 8),
    puzzle_fill(P),
    \+ trivial_puzzle(P),
    string_chars(S, P).

trivial_puzzle(P) :-
    append(Left, ['='|_], P),
    ( P = ['0','*'|_]
    ; P = ['0','/'|_]
    ; append(_, ['*','0','*'|_], Left)
    ; append(_, ['/','0','*'|_], Left)
    ; append(_, ['+','0','*'|_], Left)
    ; append(_, ['-','0','*'|_], Left)
    ; append(_, ['*','0','*'|_], Left)
    ; append(_, ['*','0','/'|_], Left)
    ; append(_, ['/','0','/'|_], Left)
    ; append(_, ['+','0','/'|_], Left)
    ; append(_, ['-','0','/'|_], Left)
    ; append(_, ['*','0','/'|_], Left)
    ; append(_, ['*','0','+'|_], Left)
    ; append(_, ['*','0','-'|_], Left)
    ; append(_, ['*','0','*'|_], Left)
    ; append(_, ['*','0','/'|_], Left)
    ; append(_, ['*','0'], Left)
    ).

% write_all_puzzles('all_puzzles.pl', all_puzzles)).
write_all_puzzles(File, Module) :-
    nb_setval(puzzle_i, -1),
    setup_call_cleanup(
        open(File, write, Fstream),
        ( format(Fstream, "~w~n~n", ["% File generated by write_all_puzzles/2"]),
          format(Fstream, "~q.~n~n", [(:- module(Module, [a_puzzle/2, a_puzzle/9, a_puzzle_i_min/1, a_puzzle_i_max/1]))]),
          format(Fstream, "~q.~n~n", [(:- discontiguous a_puzzle/2, a_puzzle/9)]),
          forall(puzzle_fill_string(S),
                 ( nb_getval(puzzle_i, I),
                   I2 is I + 1,
                   nb_setval(puzzle_i, I2),
                   string_chars(S, [C1,C2,C3,C4,C5,C6,C7,C8]),
                   format(Fstream, '~q.  ~q.~n', [a_puzzle(I2, S), a_puzzle(I2, C1,C2,C3,C4,C5,C6,C7,C8)]) )),
          nb_getval(puzzle_i, I),
          format(Fstream, '~q.~n', [a_puzzle_i_min(0)]),
          format(Fstream, '~q.~n', [a_puzzle_i_max(I)]) ),
        close(Fstream)).
