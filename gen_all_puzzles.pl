% -*- mode: Prolog; coding: utf-8 -*-

:- module(gen_all_puzzles, [write_all_puzzles/2,
                            trivial_puzzle/1,
                            trivial_term/1]).

:- set_prolog_flag(optimisation, true).

:- use_module(nerdle, [puzzle_fill/1]).
:- use_module(expr, [expr//1]).

puzzle_fill_string(S) :-
    length(P, 8),
    puzzle_fill(P),
    \+ trivial_puzzle(P),
    string_chars(S, P).

trivial_puzzle(P) :-
    append(Left, ['='|_], P),
    phrase(expr(LeftTerm), Left),
    trivial_term(LeftTerm),
    !.

trivial_term(X+Y) :- trivial_term_plus_minus(X, Y).
trivial_term(X-Y) :- trivial_term_plus_minus(X, Y).
trivial_term(X*Y) :- trivial_term_times_divide(X, Y).
trivial_term(X/Y) :- trivial_term_times_divide(X, Y).

trivial_term_plus_minus(X, _Y) :- trivial_term(X), !.
trivial_term_plus_minus(_X, Y) :- trivial_term(Y), !.

trivial_term_times_divide(0, _) :- !.
trivial_term_times_divide(_, 0) :- !. % Also catches divide-by-zero
trivial_term_times_divide(X, _Y) :- trivial_term(X), !.
trivial_term_times_divide(_X, Y) :- trivial_term(Y), !.

% write_all_puzzles('all_puzzles.pl', all_puzzles)).
write_all_puzzles(File, Module) :-
    nb_setval(puzzle_i, -1),
    setup_call_cleanup(
        open(File, write, Fstream),
        ( format(Fstream, "~w~n~n", ["% File generated by write_all_puzzles/2"]),
          format(Fstream, "~q.~n~n", [(:- module(Module, [a_puzzle/2, a_puzzle/8, a_puzzle_i_min/1, a_puzzle_i_max/1]))]),
          format(Fstream, "~q.~n~n", [(:- discontiguous a_puzzle/2, a_puzzle/8)]),
          forall(puzzle_fill_string(S),
                 ( nb_getval(puzzle_i, I),
                   I2 is I + 1,
                   nb_setval(puzzle_i, I2),
                   string_chars(S, [C1,C2,C3,C4,C5,C6,C7,C8]),
                   format(Fstream, '~q.  ~q.~n', [a_puzzle(I2, S), a_puzzle(I2, C1,C2,C3,C4,C5,C6,C7,C8)]) )),
          nb_getval(puzzle_i, I),
          format(Fstream, '~q.~n', [a_puzzle_i_min(0)]),
          format(Fstream, '~q.~n', [a_puzzle_i_max(I)]) ),
        close(Fstream)).
